language: python
dist: xenial
python:
  - "3.7"
# command to install dependencies
install:
  - pip3 install -e ".[dev]"
script: True
# command to run tests
jobs:
    include:
      - stage: "Unit Tests"
      # The unit tests should succeed when tested in python3
      - script: python3 -m pytest tests/unittests/ -vv --color=yes
        name: "Py.Test"
      - stage: "Code Quality"
      # The linter pylint somehow overlaps with flake8, but has some more checks that flake8 does not have
      - script: python3 -m pydocstyle examples pydtnsim
        name: "Pydocstyle"
      # We need this additional linter because we have to ignore certain issues within the routing submodule (i.e. we want to allow redundant code to get a better representation of the semantic structures of the routing approaches)
      - script: python3 -m pylint pydtnsim --ignore=routing
        name: "Pylint"
      # We need this additional linter because we have to ignore certain issues within the routing submodule (i.e. we want to allow redundant code to get a better representation of the semantic structures of the routing approaches)
      - script: python3 -m pylint pydtnsim.routing -d duplicate-code -d R0912 -d R0913
        name: "Pylint Routing"
      # We separate the complexity plugin functionality to get additional feedback regarding the complexity
      - script: pylint --disable=all --load-plugins=pylint.extensions.mccabe --enable=R1260 pydtnsim --ignore=routing
        name: "Pylint Complexity"
      - stage: "Routing Tests"
      # Check that all CGR routing implementations provide the same results
      - script: export PYTHONHASHSEED=1; python3 tests/routingtests/equivalence_check.py -q
        name: "Equivalence Check"
      # Check that all CGR routing implementations provide deterministic results when executed in a deterministic environment
      - script: python3 tests/routingtests/determinism_check.py -q
        name: "Determinism Check"
      - stage: "Examples"
      # Run all examples in the examples/ folder
      - script: python3 tests/run_examples.py
        name: "Examples Test Run"
      - stage: "Integration Tests"
      # Check compatibility with "old" tvg_tools
      - script: python3 tests/integrationtests/tvg_tools_old_test.py
        name: "TVG Tool (Old)"
      # Check compatibility with tvg_util tools
      - script: python3 tests/integrationtests/tvg_tools_new_test.py
        name: "TVG Util (New)"
